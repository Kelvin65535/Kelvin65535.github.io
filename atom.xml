<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kelvin&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yejiayong.com/"/>
  <updated>2019-11-29T13:15:47.623Z</updated>
  <id>http://yejiayong.com/</id>
  
  <author>
    <name>Ye Jiayong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Calibration库开发笔记（二）：CMake依赖管理</title>
    <link href="http://yejiayong.com/Calibration%E5%BA%93%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9ACMake%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%92%8C%E6%9E%84%E5%BB%BA%E9%85%8D%E7%BD%AE/"/>
    <id>http://yejiayong.com/Calibration库开发笔记（二）：CMake依赖管理和构建配置/</id>
    <published>2019-11-29T07:14:29.000Z</published>
    <updated>2019-11-29T13:15:47.623Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文是Calibration库的第二篇开发笔记，在开发Calibration库的过程中，会陆续将遇到的问题和解决方案记录下来，以供日后查阅和参考。&lt;/p&gt;
&lt;p&gt;在此次开发中我打算解决Calibration库依赖的第三方库导入问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++ Robotic OpenCV" scheme="http://yejiayong.com/tags/C-Robotic-OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>Calibration库开发笔记（一）：前期准备</title>
    <link href="http://yejiayong.com/Calibration%E5%BA%93%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/"/>
    <id>http://yejiayong.com/Calibration库开发笔记（一）：前期准备/</id>
    <published>2019-11-27T14:33:23.000Z</published>
    <updated>2019-11-29T13:17:16.932Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近在进行机器人抓取的实验和研究，其中用到了很多与图像处理相关的算法，比如相机内参标定、机器人手眼标定和点云配准等。虽然这些算法在OpenCV、PCL和ROS框架都已经有很方便的实现，而且这些函数的稳健型都很高，但是我还是有把这些操作封装成库的想法，原因有几个： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;这些算法的计算都需要提供不少的输入，而在应用中每次调用都要先写上一大段准备输入的代码，因此打算使用Wrapper把算法和输入封装成直接调用的函数； &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以前没有写过运行库，借此机会学习一下； &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把常用代码封装成库后在现有的几个项目调用都很方便，并且这些项目有的用C++有的用python，不用分别为实现相同功能写多份代码。 &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，我打算把现在常用的几个标定和配准的算法封装成库，并且提供C++和python的接口，使得调用更加方便。在这个系列中会把大部分计划和操作都记录下来，一方面为了备忘和整理思路，另一方面也把学习的经验和走过的弯路记录下来。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="C++ Robotic OpenCV" scheme="http://yejiayong.com/tags/C-Robotic-OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>使用ZeroRPC库实现远程调用图像识别服务</title>
    <link href="http://yejiayong.com/%E4%BD%BF%E7%94%A8ZeroRPC%E5%BA%93%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yejiayong.com/使用ZeroRPC库实现远程调用图像识别服务/</id>
    <published>2019-09-08T16:43:43.000Z</published>
    <updated>2019-11-27T12:27:22.236Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/0rpc/zerorpc-python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ZeroRPC&lt;/a&gt;是基于ZeroMQ的远程调用框架，它提供了方便的方式实现第三方调用本地服务的功能。在Baxter的视觉识别任务中，将训练完成的Mask RCNN模型在服务器中运行，连接机器人和ROS的客户端通过ZeroRPC调用服务器的识别服务，有效利用服务器的计算资源。由于在内网环境中，tcp连接和传输的时间可以满足摄像头捕捉的视频流的识别需求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yejiayong.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>将Kinect v1摄像头接入ROS indigo</title>
    <link href="http://yejiayong.com/Kinect%E6%91%84%E5%83%8F%E5%A4%B4%E6%8E%A5%E5%85%A5ROS/"/>
    <id>http://yejiayong.com/Kinect摄像头接入ROS/</id>
    <published>2019-09-08T16:21:55.000Z</published>
    <updated>2019-11-27T12:27:22.215Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;a href=&quot;https://wiki.nps.edu/display/RC/Kinect+Installation+on+Ubuntu+14.04+and+ROS+Indigo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://wiki.nps.edu/display/RC/Kinect+Installation+on+Ubuntu+14.04+and+ROS+Indigo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将Kinect摄像头接入ubuntu14.4，ROS indigo和Mask RCNN的图像识别服务，便于在不启动Baxter时利用Kinect的摄像头检测图像识别模型的目标识别效果，只需将原代码的订阅节点从Baxter末端摄像头切换到Kinect即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="http://yejiayong.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch利用nn.Sequential优化网络搭建过程</title>
    <link href="http://yejiayong.com/PyTorch%E5%88%A9%E7%94%A8nn-Sequential%E4%BC%98%E5%8C%96%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <id>http://yejiayong.com/PyTorch利用nn-Sequential优化网络搭建过程/</id>
    <published>2019-04-10T06:43:28.000Z</published>
    <updated>2019-11-27T12:27:22.227Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文以MobileNet为例，学习利用循环搭建大规模、重复程度大的深度网络结构的方法，像ResNet、Inception等大规模网络也可以利用本方法很方便构建一个很深的网络，值得学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyTorch" scheme="http://yejiayong.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch入门学习笔记：Dataset和模型初探</title>
    <link href="http://yejiayong.com/PyTorch%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9ADataset%E5%92%8C%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/"/>
    <id>http://yejiayong.com/PyTorch入门学习笔记：Dataset和模型初探/</id>
    <published>2019-04-03T11:16:24.000Z</published>
    <updated>2019-11-27T12:27:22.226Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、一些有用的参考资料&quot;&gt;&lt;a href=&quot;#一、一些有用的参考资料&quot; class=&quot;headerlink&quot; title=&quot;一、一些有用的参考资料&quot;&gt;&lt;/a&gt;一、一些有用的参考资料&lt;/h2&gt;&lt;p&gt;PyTorch官方文档：&lt;a href=&quot;https://pytorch.org/docs/stable/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pytorch.org/docs/stable/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;torchvision类似于tensorflow/models，包含了在计算机视觉领域主流的模型、数据以及图像处理函数。&lt;/p&gt;
&lt;p&gt;torchvision官方文档：&lt;a href=&quot;https://pytorch.org/docs/stable/torchvision/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pytorch.org/docs/stable/torchvision/index.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyTorch" scheme="http://yejiayong.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>对于近期文章更新的说明</title>
    <link href="http://yejiayong.com/%E5%AF%B9%E4%BA%8E%E8%BF%91%E6%9C%9F%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E7%9A%84%E8%AF%B4%E6%98%8E/"/>
    <id>http://yejiayong.com/对于近期文章更新的说明/</id>
    <published>2018-08-13T07:55:24.000Z</published>
    <updated>2019-11-27T12:27:22.270Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;突然发现，这个博客已经好久好久好久没有更新了。中途发生了很多事情，我在原来的实习公司当了三个月前端开发，离职后去考了个（随便挂了个职位，没有工作和工资的）在职研究生，准备再过三年的苦逼穷学生生活。&lt;/p&gt;
&lt;p&gt;由于要做的工作和等待学习的知识都发生了很多变化，同时自己也觉得
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yejiayong.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>关于Underscore.js的map函数返回对象的问题</title>
    <link href="http://yejiayong.com/%E5%85%B3%E4%BA%8EUnderscore-js%E7%9A%84map%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yejiayong.com/关于Underscore-js的map方法返回对象的问题/</id>
    <published>2017-09-07T07:29:13.000Z</published>
    <updated>2019-11-27T12:27:22.267Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Underscore.js&lt;/code&gt;作为一个广受欢迎的JavaScript工具库，其内置了一整套函数式编程的使用功能。其中&lt;code&gt;map()&lt;/code&gt;函数可以遍历指定的集合，对集合内每个元素执行指定的变换函数。官方文档对&lt;code&gt;map()&lt;/code&gt;的介绍如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;map&lt;/strong&gt; &lt;code&gt;_.map(list, iteratee, [context])&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;通过变换函数（&lt;strong&gt;iteratee&lt;/strong&gt;迭代器）把&lt;strong&gt;list&lt;/strong&gt;中的每个值映射到一个新的数组中（注：产生一个新的数组）。如果存在原生的&lt;strong&gt;map&lt;/strong&gt;方法，就用原生&lt;strong&gt;map&lt;/strong&gt;方法来代替。如果&lt;strong&gt;list&lt;/strong&gt;是个JavaScript对象，&lt;strong&gt;iteratee&lt;/strong&gt;的参数是&lt;code&gt;(value, key, list)&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然&lt;code&gt;map()&lt;/code&gt;函数接收一个数组或者集合作为输入，但是它永远只返回一个&lt;strong&gt;数组&lt;/strong&gt;。如果对一个对象使用&lt;code&gt;map()&lt;/code&gt;，那么返回的新集合将为原对象所有的&lt;strong&gt;值&lt;/strong&gt;经过变换处理后组成的&lt;strong&gt;数组&lt;/strong&gt;，而不是一个经过变换后的对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yejiayong.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>利用GitHub Webhooks实现自动化部署</title>
    <link href="http://yejiayong.com/%E5%88%A9%E7%94%A8GitHub-Webhooks%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>http://yejiayong.com/利用GitHub-Webhooks实现自动化部署/</id>
    <published>2017-09-01T01:50:10.000Z</published>
    <updated>2019-11-27T12:27:22.267Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Webhooks可谓是GitHub的其中一个大杀器，利用Webhooks可以做很多自动化执行的事情。&lt;/p&gt;
&lt;p&gt;在正确配置了Webhooks的项目上，Webhooks会接受对当前项目指定的操作（如commit、push、pull request等）作为触发响应的事件，当事件被触发后，Webhooks会向绑定的域名发送一条带有操作信息的web请求。若一个服务器监听了这个web请求的地址和端口，那么该服务器就可以接收该请求并获取操作信息，同时根据信息执行不同的任务。&lt;/p&gt;
&lt;p&gt;一个典型的场景就是远程服务器自动部署Web项目。向项目提交修改后，通过Webhooks向服务器发送请求，服务器接收并分析Webhooks请求后执行脚本，自动部署当前项目到Web目录，即可立即在浏览器查看当前作出的修改。下面就以这个场景为例配置Webhooks和服务器，来实现上述效果。&lt;/p&gt;
&lt;p&gt;服务器执行环境：Ubuntu 14.04，Apache 2.4.7，PHP 5.5.9&lt;/p&gt;
&lt;p&gt;GitHub Webhooks 文档：&lt;a href=&quot;https://developer.github.com/webhooks/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.github.com/webhooks/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="http://yejiayong.com/tags/Ubuntu/"/>
    
      <category term="GitHub" scheme="http://yejiayong.com/tags/GitHub/"/>
    
      <category term="PHP" scheme="http://yejiayong.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu修改Apache默认执行用户</title>
    <link href="http://yejiayong.com/Ubuntu%E4%BF%AE%E6%94%B9Apache%E9%BB%98%E8%AE%A4%E6%89%A7%E8%A1%8C%E7%94%A8%E6%88%B7/"/>
    <id>http://yejiayong.com/Ubuntu修改Apache默认执行用户/</id>
    <published>2017-09-01T01:44:32.000Z</published>
    <updated>2019-11-27T12:27:22.227Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Ubuntu的Apache默认执行用户是&lt;code&gt;www-data&lt;/code&gt;，用户组是&lt;code&gt;www-data&lt;/code&gt;，但是由于&lt;code&gt;www-data&lt;/code&gt;为低权限用户，有时会出现使用php读取文件、执行脚本时出现权限不够的情况，因此可以通过修改Apache的配置，达到使用其他用户执行Apache的效果。&lt;/p&gt;
&lt;p&gt;适用版本：Apache 2.4.7&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="http://yejiayong.com/tags/Ubuntu/"/>
    
      <category term="Apache" scheme="http://yejiayong.com/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript计算不同编码下字符串字节长度</title>
    <link href="http://yejiayong.com/JavaScript%E8%AE%A1%E7%AE%97%E4%B8%8D%E5%90%8C%E7%BC%96%E7%A0%81%E4%B8%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E8%8A%82%E9%95%BF%E5%BA%A6/"/>
    <id>http://yejiayong.com/JavaScript计算不同编码下字符串字节长度/</id>
    <published>2017-08-29T08:13:57.000Z</published>
    <updated>2019-11-27T12:27:22.215Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;默认的JavaScript计算字符串长度是按照字符数计算的，无论是1个汉字还是1个英文都计算为1个单位长度，但在某些环境中该值可能不够准确，例如在UTF-8中一个中文字符为3~4个字节，ZHS16GBK中为2个字节，这就需要用字符串的字节长度来准确描述一个字符串的长度。那么如何准确表达特定编码下的字符串字节长度呢？下面总结了一些方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yejiayong.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>为jQuery部件添加部件公共属性或方法</title>
    <link href="http://yejiayong.com/%E4%B8%BAjQuery%E9%83%A8%E4%BB%B6%E6%B7%BB%E5%8A%A0%E9%83%A8%E4%BB%B6%E5%85%AC%E5%85%B1%E5%B1%9E%E6%80%A7%E6%88%96%E6%96%B9%E6%B3%95/"/>
    <id>http://yejiayong.com/为jQuery部件添加部件公共属性或方法/</id>
    <published>2017-08-04T08:53:49.000Z</published>
    <updated>2019-11-27T12:27:22.236Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题的提出&quot;&gt;&lt;a href=&quot;#问题的提出&quot; class=&quot;headerlink&quot; title=&quot;问题的提出&quot;&gt;&lt;/a&gt;问题的提出&lt;/h2&gt;&lt;p&gt;在jQuery中我们可以轻易创建一个新的插件或者扩展部件库中已有的插件，使用以下的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$.widget(&lt;span class=&quot;string&quot;&gt;&#39;namespace.widgetName&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 在此处定义部件属性/方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中&lt;code&gt;namespace&lt;/code&gt;为部件指定一个命名空间，&lt;code&gt;widgetName&lt;/code&gt;为部件名，后面的对象包含扩展该组件构造函数的属性和方法。在当前构造器函数被执行后，这个自定义组件的构造函数将包含自定义的属性/方法，将被应用到每一个通过该构造器新建的实例中。&lt;/p&gt;
&lt;p&gt;但是有个问题，由于此处的定义仅仅作为部件构造函数的定义，因此每一个新创建的部件实例将会添加上构造函数上定义的属性和方法，因此每一个属性都是部件唯一的，那如果要添加所有该部件都可用的公共属性或方法呢？这就需要修改部件的原型对象了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yejiayong.com/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://yejiayong.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的立即执行函数</title>
    <link href="http://yejiayong.com/JavaScript%E7%9A%84%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    <id>http://yejiayong.com/JavaScript的立即执行函数/</id>
    <published>2017-08-02T03:22:07.000Z</published>
    <updated>2019-11-27T12:27:22.215Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在很多JavaScript代码中都能看到这种写法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;或者&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;!&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这种看起来比较奇葩的写法被称为立即执行函数，可以让JavaScript解释器在执行到此处代码时立即执行函数内部的代码。要理解立即执行函数需要区别函数声明和函数表达式的概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yejiayong.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>为NexT主题的Hexo博客增加备案号</title>
    <link href="http://yejiayong.com/%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E5%A4%87%E6%A1%88%E5%8F%B7/"/>
    <id>http://yejiayong.com/为NexT主题的Hexo博客增加备案号/</id>
    <published>2017-08-02T01:55:18.000Z</published>
    <updated>2019-11-27T12:27:22.235Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;根据国家规定，通过域名备案的网站需要在网站底部展示网站的备案号，但是Hexo并没有配置备案号的选项，如果你使用NexT主题的话，可以通过修改主题配置文件来实现这个效果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yejiayong.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>为Github pages增加腾讯云cdn加速功能</title>
    <link href="http://yejiayong.com/%E4%B8%BAGithub-pages%E5%A2%9E%E5%8A%A0%E8%85%BE%E8%AE%AF%E4%BA%91cdn%E5%8A%A0%E9%80%9F%E5%8A%9F%E8%83%BD/"/>
    <id>http://yejiayong.com/为Github-pages增加腾讯云cdn加速功能/</id>
    <published>2017-08-01T09:19:44.000Z</published>
    <updated>2019-11-27T12:27:22.227Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有感于GitHub在国内的访问速度，于是便有使用cdn加速博客访问的想法，在腾讯云上一次测试成功。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yejiayong.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer-反转链表</title>
    <link href="http://yejiayong.com/%E5%89%91%E6%8C%87offer-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://yejiayong.com/剑指offer-反转链表/</id>
    <published>2017-07-26T02:26:37.000Z</published>
    <updated>2019-11-27T12:27:22.270Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;输入一个链表，反转链表后，输出链表的所有元素。&lt;/p&gt;
&lt;p&gt;链表结点结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListNode&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;next&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ListNode(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x) :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			val(x), next(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://yejiayong.com/tags/C/"/>
    
      <category term="剑指offer" scheme="http://yejiayong.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="算法题" scheme="http://yejiayong.com/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer-二叉搜索树的后序遍历序列</title>
    <link href="http://yejiayong.com/%E5%89%91%E6%8C%87offer-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/"/>
    <id>http://yejiayong.com/剑指offer-二叉搜索树的后序遍历序列/</id>
    <published>2017-07-26T02:24:25.000Z</published>
    <updated>2019-11-27T12:27:22.269Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://yejiayong.com/tags/C/"/>
    
      <category term="剑指offer" scheme="http://yejiayong.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="算法题" scheme="http://yejiayong.com/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer-丑数</title>
    <link href="http://yejiayong.com/%E5%89%91%E6%8C%87offer-%E4%B8%91%E6%95%B0/"/>
    <id>http://yejiayong.com/剑指offer-丑数/</id>
    <published>2017-07-26T02:21:49.000Z</published>
    <updated>2019-11-27T12:27:22.269Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;把只包含因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://yejiayong.com/tags/C/"/>
    
      <category term="剑指offer" scheme="http://yejiayong.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="算法题" scheme="http://yejiayong.com/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer-求1+2+3+...+n</title>
    <link href="http://yejiayong.com/%E5%89%91%E6%8C%87offer-%E6%B1%821-2-3-n/"/>
    <id>http://yejiayong.com/剑指offer-求1-2-3-n/</id>
    <published>2017-07-26T01:50:23.000Z</published>
    <updated>2019-11-27T12:27:22.270Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句&lt;code&gt;（A?B:C）&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://yejiayong.com/tags/C/"/>
    
      <category term="剑指offer" scheme="http://yejiayong.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="算法题" scheme="http://yejiayong.com/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="http://yejiayong.com/Hello-Hexo/"/>
    <id>http://yejiayong.com/Hello-Hexo/</id>
    <published>2017-07-26T01:49:48.000Z</published>
    <updated>2019-11-27T12:27:22.215Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实这个Blog已经搭建完成很久了，但是一直找不到时间来写，今天上班终于有时间摸鱼，于是在公司的电脑上安装了Node.js和Hexo，顺便搞定了写文章的环境。&lt;/p&gt;
&lt;p&gt;最近的计划是将在实习期间写js代码遇到的坑记下来，坑实在是太多了写起来有些费时间。另外在Course
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yejiayong.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
